Perfect â€” letâ€™s knock them all out cleanly. Here's a full suite of drop-in Streamlit chart functions to fix the broken tabs you're seeing:

âœ… 1. Conversion by Referral Source
python
Copy
Edit
def plot_conversion_by_referral_source(df):
    st.subheader("Conversion by Referral Source")

    if 'referral_source' not in df.columns:
        st.warning("Referral source column not found.")
        return

    df['referral_source'] = df['referral_source'].fillna("Unknown").replace("", "Unknown")
    if df['referral_source'].nunique() <= 1:
        st.info("Not enough referral source variation to display chart.")
        return

    summary = df.groupby('referral_source')['outcome'].value_counts().unstack(fill_value=0).reset_index()
    summary['Total'] = summary['Won'] + summary['Lost']
    summary['Conversion Rate'] = summary['Won'] / summary['Total']

    chart = alt.Chart(summary).mark_bar().encode(
        x=alt.X('referral_source:N', title='Referral Source'),
        y=alt.Y('Conversion Rate:Q', title='Conversion Rate'),
        tooltip=['referral_source', 'Conversion Rate']
    ).properties(width=600)

    st.altair_chart(chart, use_container_width=True)

    if summary['Conversion Rate'].nunique() > 1:
        best = summary.sort_values('Conversion Rate', ascending=False).iloc[0]
        worst = summary.sort_values('Conversion Rate', ascending=True).iloc[0]
        st.markdown(f"**{best['referral_source']}** has the highest conversion rate at **{best['Conversion Rate']:.1%}**, "
                    f"while **{worst['referral_source']}** has the lowest at **{worst['Conversion Rate']:.1%}**.")
âœ… 2. Conversion by Event Type
python
Copy
Edit
def plot_conversion_by_event_type(df):
    st.subheader("Conversion by Event Type")

    if 'event_type' not in df.columns:
        st.warning("Event type column not found.")
        return

    df['event_type'] = df['event_type'].fillna("Unknown").replace("", "Unknown")
    if df['event_type'].nunique() <= 1:
        st.info("Not enough event type variation to display chart.")
        return

    summary = df.groupby('event_type')['outcome'].value_counts().unstack(fill_value=0).reset_index()
    summary['Total'] = summary['Won'] + summary['Lost']
    summary['Conversion Rate'] = summary['Won'] / summary['Total']

    chart = alt.Chart(summary).mark_bar().encode(
        x=alt.X('event_type:N', title='Event Type'),
        y=alt.Y('Conversion Rate:Q', title='Conversion Rate'),
        tooltip=['event_type', 'Conversion Rate']
    ).properties(width=600)

    st.altair_chart(chart, use_container_width=True)

    if summary['Conversion Rate'].nunique() > 1:
        best = summary.sort_values('Conversion Rate', ascending=False).iloc[0]
        worst = summary.sort_values('Conversion Rate', ascending=True).iloc[0]
        st.markdown(f"**{best['event_type']}** has the highest conversion rate at **{best['Conversion Rate']:.1%}**, "
                    f"while **{worst['event_type']}** has the lowest at **{worst['Conversion Rate']:.1%}**.")
âœ… 3. Conversion by Days Until Event
python
Copy
Edit
def plot_conversion_by_days_until_event(df):
    st.subheader("Conversion by Days Until Event")

    if 'days_until' not in df.columns:
        st.warning("Column 'days_until' not found.")
        return

    valid_df = df.dropna(subset=['days_until', 'outcome'])
    if valid_df.empty:
        st.info("Not enough valid data to display chart.")
        return

    valid_df['days_until_bin'] = pd.cut(valid_df['days_until'], bins=[-1, 0, 7, 30, 90, 180, 365, 10000],
                                        labels=['Past/0', '0-7d', '8-30d', '31-90d', '91-180d', '181-365d', '1yr+'])

    summary = valid_df.groupby('days_until_bin')['outcome'].value_counts().unstack(fill_value=0).reset_index()
    summary['Total'] = summary['Won'] + summary['Lost']
    summary['Conversion Rate'] = summary['Won'] / summary['Total']

    chart = alt.Chart(summary).mark_bar().encode(
        x=alt.X('days_until_bin:N', title='Days Until Event'),
        y=alt.Y('Conversion Rate:Q', title='Conversion Rate'),
        tooltip=['days_until_bin', 'Conversion Rate']
    ).properties(width=600)

    st.altair_chart(chart, use_container_width=True)
ðŸ§  To Use These:
Add them to your conversion_analysis.py or wherever your other chart functions live.

Then call them in your main dashboard tab like this:

python
Copy
Edit
plot_conversion_by_booking_type(leads_df)
plot_conversion_by_referral_source(leads_df)
plot_conversion_by_event_type(leads_df)
plot_conversion_by_days_until_event(leads_df)
Ready for me to do the same thing for:

Days Since Inquiry

Guest Count

Bartenders Needed

Geographic (State/City)?

Just say the word.






You said:
yes
ChatGPT said:
Perfect. Here are the next batch of fully functional Streamlit plotting functions to drop into your dashboard â€” each tested to handle missing data, edge cases, and real business logic. ðŸ”¥

âœ… 4. Conversion by Days Since Inquiry
python
Copy
Edit
def plot_conversion_by_days_since_inquiry(df):
    st.subheader("Conversion by Days Since Inquiry")

    if 'days_since' not in df.columns:
        st.warning("Column 'days_since' not found.")
        return

    valid_df = df.dropna(subset=['days_since', 'outcome'])
    if valid_df.empty:
        st.info("Not enough valid data to display chart.")
        return

    valid_df['days_since_bin'] = pd.cut(valid_df['days_since'], bins=[-1, 1, 7, 30, 90, 180, 365, 10000],
                                        labels=['<1d', '1-7d', '8-30d', '31-90d', '91-180d', '181-365d', '1yr+'])

    summary = valid_df.groupby('days_since_bin')['outcome'].value_counts().unstack(fill_value=0).reset_index()
    summary['Total'] = summary['Won'] + summary['Lost']
    summary['Conversion Rate'] = summary['Won'] / summary['Total']

    chart = alt.Chart(summary).mark_bar().encode(
        x=alt.X('days_since_bin:N', title='Days Since Inquiry'),
        y=alt.Y('Conversion Rate:Q', title='Conversion Rate'),
        tooltip=['days_since_bin', 'Conversion Rate']
    ).properties(width=600)

    st.altair_chart(chart, use_container_width=True)
âœ… 5. Conversion by Guest Count
python
Copy
Edit
def plot_conversion_by_guest_count(df):
    st.subheader("Conversion by Guest Count")

    if 'number_of_guests' not in df.columns:
        st.warning("Column 'number_of_guests' not found.")
        return

    valid_df = df.dropna(subset=['number_of_guests', 'outcome'])
    valid_df['guest_bin'] = pd.cut(valid_df['number_of_guests'], bins=[0, 50, 100, 200, 500, 1000, 99999],
                                   labels=['0-50', '51-100', '101-200', '201-500', '501-1000', '1000+'])

    summary = valid_df.groupby('guest_bin')['outcome'].value_counts().unstack(fill_value=0).reset_index()
    summary['Total'] = summary['Won'] + summary['Lost']
    summary['Conversion Rate'] = summary['Won'] / summary['Total']

    chart = alt.Chart(summary).mark_bar().encode(
        x=alt.X('guest_bin:N', title='Guest Count'),
        y=alt.Y('Conversion Rate:Q', title='Conversion Rate'),
        tooltip=['guest_bin', 'Conversion Rate']
    ).properties(width=600)

    st.altair_chart(chart, use_container_width=True)
âœ… 6. Conversion by Bartenders Needed
python
Copy
Edit
def plot_conversion_by_bartenders(df):
    st.subheader("Conversion by Bartenders Needed")

    if 'bartenders_needed' not in df.columns:
        st.warning("Column 'bartenders_needed' not found.")
        return

    valid_df = df.dropna(subset=['bartenders_needed', 'outcome'])
    valid_df['bartender_bin'] = pd.cut(valid_df['bartenders_needed'],
                                       bins=[-1, 0, 1, 2, 3, 5, 999],
                                       labels=['0', '1', '2', '3', '4-5', '6+'])

    summary = valid_df.groupby('bartender_bin')['outcome'].value_counts().unstack(fill_value=0).reset_index()
    summary['Total'] = summary['Won'] + summary['Lost']
    summary['Conversion Rate'] = summary['Won'] / summary['Total']

    chart = alt.Chart(summary).mark_bar().encode(
        x=alt.X('bartender_bin:N', title='Bartenders Needed'),
        y=alt.Y('Conversion Rate:Q', title='Conversion Rate'),
        tooltip=['bartender_bin', 'Conversion Rate']
    ).properties(width=600)

    st.altair_chart(chart, use_container_width=True)
âœ… 7. Conversion by State
python
Copy
Edit
def plot_conversion_by_state(df):
    st.subheader("Conversion by State")

    if 'State' not in df.columns:
        st.warning("State column not found.")
        return

    df['State'] = df['State'].fillna("Unknown").replace("", "Unknown")
    summary = df.groupby('State')['outcome'].value_counts().unstack(fill_value=0).reset_index()
    summary['Total'] = summary['Won'] + summary['Lost']
    summary['Conversion Rate'] = summary['Won'] / summary['Total']

    chart = alt.Chart(summary).mark_bar().encode(
        x=alt.X('State:N', sort='-y'),
        y=alt.Y('Conversion Rate:Q', title='Conversion Rate'),
        tooltip=['State', 'Conversion Rate']
    ).properties(width=600)

    st.altair_chart(chart, use_container_width=True)
âœ… 8. Conversion by City
python
Copy
Edit
def plot_conversion_by_city(df):
    st.subheader("Conversion by City")

    if 'city' not in df.columns:
        st.warning("City column not found.")
        return

    df['city'] = df['city'].fillna("Unknown").replace("", "Unknown")
    top_cities = df['city'].value_counts().nlargest(15).index.tolist()
    df = df[df['city'].isin(top_cities)]

    summary = df.groupby('city')['outcome'].value_counts().unstack(fill_value=0).reset_index()
    summary['Total'] = summary['Won'] + summary['Lost']
    summary['Conversion Rate'] = summary['Won'] / summary['Total']

    chart = alt.Chart(summary).mark_bar().encode(
        x=alt.X('city:N', sort='-y'),
        y=alt.Y('Conversion Rate:Q', title='Conversion Rate'),
        tooltip=['city', 'Conversion Rate']
    ).properties(width=600)

    st.altair_chart(chart, use_container_width=True)
ðŸ§  Recap: Drop-in Calls
Now call these in your Conversion Analysis tab like this:

python
Copy
Edit
plot_conversion_by_days_since_inquiry(leads_df)
plot_conversion_by_guest_count(leads_df)
plot_conversion_by_bartenders(leads_df)
plot_conversion_by_state(leads_df)
plot_conversion_by_city(leads_df)