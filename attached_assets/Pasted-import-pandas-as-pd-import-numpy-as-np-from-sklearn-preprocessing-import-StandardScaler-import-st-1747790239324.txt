import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
import streamlit as st

# --- CONFIGURABLE WEIGHTS (based on model feature importance) ---
WEIGHTS = {
    'number_of_guests': 3.5,
    'days_until_event': -2.0,
    'days_since_inquiry': -2.5,
    'bartenders_needed': 1.5,
    'referral_tier': 4.0,
    'is_corporate': 2.0,
    'phone_area_match': 1.0,
}

# --- SCORING FUNCTION ---
def compute_lead_score(row):
    score = 0
    score += WEIGHTS['number_of_guests'] * np.log1p(row['number_of_guests'])
    score += WEIGHTS['days_until_event'] * (1 / (1 + row['days_until_event']))
    score += WEIGHTS['days_since_inquiry'] * (row['days_since_inquiry'] / 30)
    score += WEIGHTS['bartenders_needed'] * row['bartenders_needed']
    score += WEIGHTS['referral_tier'] * row['referral_tier']
    score += WEIGHTS['is_corporate'] * int(row['is_corporate'])
    score += WEIGHTS['phone_area_match'] * int(row['phone_area_match'])
    return score

# --- LEAD CATEGORY CLASSIFICATION ---
def classify_score(score):
    if score >= 12:
        return 'üî• Hot'
    elif score >= 8:
        return 'üå§Ô∏è Warm'
    elif score >= 4:
        return '‚ùÑÔ∏è Cool'
    else:
        return 'üßä Cold'

# --- MAIN PROCESSING FUNCTION ---
def process_lead_scoring(df):
    required_columns = ['number_of_guests', 'days_until_event', 'days_since_inquiry',
                        'bartenders_needed', 'referral_tier', 'is_corporate', 'phone_area_match']
    df = df.dropna(subset=required_columns)
    df['lead_score'] = df.apply(compute_lead_score, axis=1)
    df['score_category'] = df['lead_score'].apply(classify_score)
    return df

# --- STREAMLIT INTEGRATION ---
def render_lead_scoring_ui(df):
    st.header("ü§ñ Lead Scoring Calculator")

    df = process_lead_scoring(df)
    
    st.subheader("Top 10 High Scoring Leads")
    st.dataframe(df.sort_values(by='lead_score', ascending=False).head(10)[
        ['name', 'email', 'lead_score', 'score_category']
    ])

    st.subheader("Lead Score Distribution")
    st.bar_chart(df['score_category'].value_counts())

    st.subheader("Manual Lead Scoring Test")
    with st.form("manual_test"):
        guests = st.number_input("Guests", 0, 1000, 50)
        days_until = st.number_input("Days Until Event", 0, 365, 30)
        days_since = st.number_input("Days Since Inquiry", 0, 365, 1)
        bartenders = st.slider("Bartenders Needed", 0, 10, 2)
        tier = st.slider("Referral Tier (1‚Äì3)", 1, 3, 2)
        corp = st.checkbox("Corporate Event")
        phone_match = st.checkbox("Phone Area Code Matches State")
        submitted = st.form_submit_button("Calculate Score")

        if submitted:
            test_row = pd.Series({
                'number_of_guests': guests,
                'days_until_event': days_until,
                'days_since_inquiry': days_since,
                'bartenders_needed': bartenders,
                'referral_tier': tier,
                'is_corporate': corp,
                'phone_area_match': phone_match,
            })
            score = compute_lead_score(test_row)
            cat = classify_score(score)
            st.success(f"Lead Score: {score:.2f} ‚Üí {cat}")
